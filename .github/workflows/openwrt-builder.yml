#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
    types: [auto-build-firmware]
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build Version'
        required: true
        default: 'padavanonly/immortalwrt-mt798x-6.6'
        type: choice
        options:
          - padavanonly/immortalwrt-mt798x-6.6
          - Muffinbit/immortalwrt
      lan_ip:
        description: 'Set LAN IP Address'
        required: false
        default: '192.168.1.1'
      default_theme:
        description: 'Select Default Theme'
        required: false
        default: 'bootstrap'
        type: choice
        options:
          - argon
          - bootstrap
      hostname:
        description: 'Set Hostname'
        required: false
        default: 'ImmortalWrt'
      wifiname_2g:
        description: 'Set 2.4G WiFi Name'
        required: false
        default: 'ImmortalWrt_2.4G'
      wifiname_5g:
        description: 'Set 5G WiFi Name'
        required: false
        default: 'ImmortalWrt_5G'
      ssh:
        description: 'Connect to Actions via SSH'
        required: false
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/${{ github.event.inputs.build_version }}
  REPO_BRANCH: ${{ github.event.inputs.build_version == 'padavanonly/immortalwrt-mt798x-6.6' && 'openwrt-24.10-6.6' || 'master' }}
  SYSTEM_VERSION: ${{ github.event.inputs.build_version == 'padavanonly/immortalwrt-mt798x-6.6' && 'immortalwrt 24.10' || 'immortalwrt 24.10' }}
  KERNEL_VERSION: ${{ github.event.inputs.build_version == 'padavanonly/immortalwrt-mt798x-6.6' && '6.6' || '6.12' }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  LAN_IP: ${{ github.event.inputs.lan_ip }}
  DEFAULT_THEME: ${{ github.event.inputs.default_theme }}
  HOSTNAME: ${{ github.event.inputs.hostname }}
  WIFINAME_2G: ${{ github.event.inputs.wifiname_2g }}
  WIFINAME_5G: ${{ github.event.inputs.wifiname_5g }}
  SSH: ${{ format('{0}', github.event.inputs.ssh) }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      deviceName: ${{ env.DEVICE_NAME }}
      fileDate: ${{ env.FILE_DATE }}

    steps:
      # ====================== System Preparation ======================
      - name: Check Disk Space (Before Optimization)
        run: |
          echo "üõ†Ô∏è Disk Space Before Optimization:"
          echo "=============================================================="
          df -hT
          echo "=============================================================="

      - name: Optimize Disk Space
        uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Free Disk Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 3072
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Check Disk Space (After Optimization)
        run: |
          echo "‚úÖ Disk Space After Optimization:"
          echo "=============================================================="
          df -hT
          echo "=============================================================="

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check System Resources
        run: |
          echo "üíª CPU Information:"
          echo "--------------------------------------"
          echo "CPU Cores: $(nproc)"
          echo "CPU Model: $(lscpu | grep 'Model name' | cut -d':' -f2 | sed 's/^ *//')"
          
          echo "üß† Memory Information:"
          echo "--------------------------------------"
          free -h
          
          echo "üíæ Disk Information:"
          echo "--------------------------------------"
          df -hT

      # ====================== Environment Setup ======================
      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "üì¶ Installing build dependencies..."
          sudo apt-get -qq update
          sudo apt-get -qq full-upgrade
          sudo apt-get -qq install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib \
            g++-multilib gettext xorriso git gperf haveged help2man intltool libc6-dev-i386 \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm \
            lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
            python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
            uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          
          echo "üì¶ Installing Node.js dependencies..."
          sudo apt install npm
          sudo npm install -g uglify-js
          
          echo "üßπ Cleaning system..."
          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean
          sudo rm -rf \
            /etc/apt/sources.list.d/* \
            /usr/local/lib/android \
            /opt/ghc \
            /usr/share/dotnet \
            /usr/local/graalvm \
            /usr/local/.ghcup \
            /usr/local/share/powershell \
            /usr/local/share/chromium \
            /usr/local/lib/node_modules
          
          echo "‚è∞ Setting timezone to $TZ..."
          sudo timedatectl set-timezone "$TZ"
          
          echo "üîí Setting workspace permissions..."
          sudo chown -R $USER:$(id -gn) $GITHUB_WORKSPACE

      # ====================== Source Code Processing ======================
      - name: Clone Source Code
        run: |
          echo "üì• Cloning source branch: $REPO_BRANCH..."
          rm -rf openwrt
          git clone --branch=$REPO_BRANCH --depth=50 $REPO_URL openwrt

      - name: Load Custom Feeds
        run: |
          if [ -e "$FEEDS_CONF" ]; then
            echo "üîÑ Loading custom feeds configuration..."
            mv "$FEEDS_CONF" openwrt/feeds.conf.default
          fi
          
          if [ -e "$DIY_P1_SH" ]; then
            echo "üîß Executing custom script Part 1..."
            chmod +x "$DIY_P1_SH"
            cd openwrt
            "../$DIY_P1_SH"
          else
            echo "‚ö†Ô∏è Warning: $DIY_P1_SH not found"
          fi

      - name: Repair Git Repository
        run: |
          echo "üîß Repairing Git repository..."
          cd openwrt
          git reset --hard HEAD
          git clean -fdx
          git fetch --all --depth=100
          git checkout $REPO_BRANCH

      - name: Update Feeds
        run: |
          echo "üîÑ Updating feeds..."
          cd openwrt
          ./scripts/feeds update -a

      - name: Install Feeds
        run: |
          echo "üì¶ Installing feeds..."
          cd openwrt
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          if [ -e "files" ]; then
            echo "üìÅ Loading custom files..."
            mv files openwrt/files
          fi
          
          if [ -e "$CONFIG_FILE" ]; then
            echo "‚öôÔ∏è Loading custom configuration..."
            mv "$CONFIG_FILE" openwrt/.config
          fi
          
          if [ -e "$DIY_P1_SH" ]; then
            echo "üîß Executing custom script Part 2..."
            chmod +x "$DIY_P2_SH"
            cd openwrt
            "../$DIY_P2_SH"
          else
            echo "‚ö†Ô∏è Warning: $DIY_P2_SH not found"
          fi

      # ====================== SSH Connection Option ======================
      - name: SSH to Actions
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
        uses: P3TERX/ssh2actions@main
        # Send connection info to Telegram (optional)
        # You can find related documents here: https://core.telegram.org/bots
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      # ====================== Compilation Phase ======================
      - name: Download Packages
        run: |
          echo "üì¶ Downloading packages..."
          cd openwrt
          make defconfig
          make download -j$(nproc) || make download -j1
          
          echo "üßπ Cleaning invalid downloads..."
          find dl -size -1024c -delete

      - name: Compile Firmware
        id: compile
        run: |
          cd openwrt
          THREADS=$(($(nproc) * 3 / 2))
          echo "üîß Compiling with $THREADS threads..."
          
          # Compilation retry logic
          if ! make -j$THREADS; then
            echo "‚ö†Ô∏è First compilation attempt failed, retrying with single thread..."
            if ! make -j1; then
              echo "‚ö†Ô∏è Second compilation attempt failed, enabling verbose output..."
              make -j1 V=s
            fi
          fi
          
          # Extract device name
          DEVICE_NAME=$(grep -oP 'CONFIG_TARGET.*DEVICE_\K[^=]+(?=y)' .config | head -n1)
          if [ -n "$DEVICE_NAME" ]; then
            echo "‚úÖ Device Name: $DEVICE_NAME"
            echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Could not determine device name"
            echo "DEVICE_NAME=unknown" >> $GITHUB_ENV
          fi
          
          # Set file date
          FILE_DATE=$(date +"%Y%m%d%H%M")
          echo "üìÖ File Date: $FILE_DATE"
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Check Disk Space (After Compilation)
        run: |
          echo "üíæ Disk Space After Compilation:"
          echo "=============================================================="
          df -hT
          echo "=============================================================="

      # ====================== Output Processing ======================
      - name: Upload Bin Directory
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Prepare Firmware Files
        id: prepare
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          echo "üì¶ Preparing firmware files..."
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware Files
        if: steps.prepare.outputs.status == 'success' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate Release Information
        id: release_info
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          cd openwrt
          
          DEVICE_MODEL=$(grep 'CONFIG_TARGET_PROFILE=' .config | awk -F'"' '{print $2}' | sed 's/^DEVICE_//')
          if [ -z "$DEVICE_MODEL" ]; then
              DEVICE_MODEL="unknown_device"
          fi
          
          TARGET_ARCH=$(grep 'CONFIG_TARGET_ARCH_PACKAGES=' .config | awk -F'"' '{print $2}')
          if [ -z "$TARGET_ARCH" ]; then
              TARGET_ARCH="unknown_arch"
          fi
          
          TARGET_BOARD=$(grep 'CONFIG_TARGET_BOARD=' .config | awk -F'"' '{print $2}')
          TARGET_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET=' .config | awk -F'"' '{print $2}')
          DEVICE_INFO="${TARGET_BOARD}/${TARGET_SUBTARGET}"
          PLUGINS=$(grep '^CONFIG_PACKAGE_luci-app-[a-z-]*=y$' .config | sed 's/^CONFIG_PACKAGE_//;s/=y$//' | sort)
          RELEASE_TAG="$(date +"%Y.%m.%d-%H%M")-${DEVICE_INFO}-${DEVICE_MODEL}-${TARGET_ARCH}"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

          cat > release.txt <<EOF
          ### üöÄ${DEVICE_MODEL}-immortalwrt Firmware

          - üåêAdmin URL: ${LAN_IP}
          - üîëLogin: root
          - üîíPassword: none
          - üìãDevice Info: ${DEVICE_INFO}
          - üñ•Ô∏èDevice Model: ${DEVICE_MODEL}
          - üèóÔ∏èDevice Arch: ${TARGET_ARCH}
          - üíøSystem Version: ${SYSTEM_VERSION}
          - ‚öôÔ∏èKernel Version: ${KERNEL_VERSION}
          - üé®Default Theme: ${DEFAULT_THEME}
          - üè∑Ô∏èHostname: ${HOSTNAME}
          - üì∂2.4G WiFi SSID: ${WIFINAME_2G}
          - üì∂5G WiFi SSID: ${WIFINAME_5G}

          #### üì¶Plugins
          \`\`\`
          EOF

          count=0
          if [ -n "$PLUGINS" ]; then
              while IFS= read -r plugin; do
                  count=$((count + 1))
                  echo "${count}. ${plugin}" >> release.txt
              done <<< "$PLUGINS"
          else
              echo "none" >> release.txt
          fi

          cat >> release.txt <<EOF
          \`\`\`

          #### üîßBuild Information
          - Build Time: $(date +"%Y-%m-%d %H:%M:%S %Z")
          - Source URL: ${REPO_URL}
          - Source Branch: ${REPO_BRANCH}
          EOF

          echo "======= release.txt content ======="
          cat release.txt
          echo "=================================="

          mv release.txt ../release_content.txt
          
          echo "üìù Release information generated"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.release_info.outputs.status == 'success' && !cancelled()
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          body_path: release_content.txt
          files: ${{ env.FIRMWARE }}/*
      # ====================== Cleanup Phase ======================
      - name: Cleanup Old Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 3
          keep_minimum_runs: 5

      - name: Cleanup Old Releases
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
